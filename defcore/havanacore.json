{ "release": "havana",
  "schema": "1.0",
  "criteria" : { 
      "atomic" : { "Description" : "Capabilities is unique and cannot be built out of other must-pass capabilities",
          "name" : "Atomic", "weight": 8
        },
      "clients" : { "Description" : "Candidates are widely used capabilities: Should be included if part of common libraries (Fog, Apache jclouds, etc)",
          "name" : "Used by Clients", "weight": 8
        },
      "complete" : { "Description" : "Where the code being tested has a designated area of alternate implementation (extension framework) as per the Core Principles, there should be parity in capability tested across extension implementations. This also implies that the capability test is not configuration specific or locked to non-open technology.",
          "name" : "Complete", "weight": 8
        },
      "deployed" : { "Description" : "Candidates are widely deployed capabilities. We favor capabilities that are supported by multiple public cloud providers and private cloud products.",
          "name" : "Widely Deployed", "weight": 8
        },
      "discover" : { "Description" : "Capability being tested is Service Discoverable (can be found in Keystone and via service introspection)",
          "name" : "Discoverable", "weight": 8
        },
      "doc" : { "Description" : "Should be well documented, particularly the expected behavior. This can be a very subjective measure and we expect to refine this definition over time.",
          "name" : "Documented", "weight": 8
        },
      "foundation" : { "Description" : "Test capabilities that are required by other must-pass tests and/or depended on by many other capabilities",
          "name" : "Foundation", "weight": 8
        },
      "future" : { "Description" : "Should reflect future technical direction (from the project technical teams and the TC) and help manage deprecated capabilities.",
          "name" : "Future Direction", "weight": 9
        },
      "proximity" : { "Description" : "Sometimes called a Test Cluster, selects for Capabilities that are related to Core Capabilities. This helps ensure that related capabilities are managed together.",
          "name" : "Proximity", "weight": 8
        },
      "stable" : { "Description" : "Test is required stable for >2 releases because we don't want core capabilities that do not have dependable APIs.",
          "name" : "Stable", "weight": 9
        },
      "sticky" : { "Description" : "A test that is a must-pass test should stay a must-pass test. This make makes core capabilities sticky release per release. Leaving Core is disruptive to the ecosystem",
          "name" : "Core in Last Release", "weight": 9
        },
      "tools" : { "Description" : "Candidates are widely used capabilities:Should be included if supported by common tools (RightScale, Scalr, CloudForms, ...)",
          "name" : "Used by Tools", "weight": 9
        }
    },
  "capabilities": {
    "foo": {
      "core":true,
      "admin":false,
      "achievements":["atomic","clients", "sticky", "deployed", "discover", "doc", "foundation", "future", "proximity", "stable", "tools"],
      "tests":["test_access_public_container_object_without_using_creds"],
      "flagged":[]
    },
    "bar": {
      "core":false,
      "admin":true,
      "achievements":["atomic","doc","tools"],
      "tests":["test_access_public_container_object"],
      "flagged":[]
    }    
  }
}